// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a = x, b = false, sel = zx, out = c0);
   Not16(a = c0, out = c1);
   Mux16(a = c0, b = c1, sel = nx, out = c2);

   Mux16(a = y, b = false, sel = zy, out = c3);
   Not16(a = c3, out = c4);
   Mux(a = c3, b = c4, sel = ny, out = c5);

   Add16(a = c2, b = c5, out = xaddy);
   And16(a = c2, b = c5, out = xandy);
   Mux(a = xandy, b = xaddy, sel = f, out = c6);
   Not(a = c6, out = c7);
   Mux16(a = c6, b = c7, sel = n, out = out);

   Or(a = out[0], b = out[1], out = z0);
   Or(a = z0, b = out[2], out = z1);
   Or(a = z1, b = out[3], out = z2);
   Or(a = z2, b = out[4], out = z3);
   Or(a = z3, b = out[5], out = z4);
   Or(a = z4, b = out[6], out = z5);
   Or(a = z5, b = out[7], out = z6);
   Or(a = z6, b = out[8], out = z7);
   Or(a = z7, b = out[9], out = z8);
   Or(a = z8, b = out[10], out = z9);
   Or(a = z9, b = out[11], out = z10);
   Or(a = z10, b = out[12], out = z11);
   Or(a = z11, b = out[13], out = z12);
   Or(a = z12, b = out[14], out = z13);
   Or(a = z13, b = out[15], out = z14);
   Not(a = z14, out = zr);

   And(a = out[15], b = true, out = ng);

}